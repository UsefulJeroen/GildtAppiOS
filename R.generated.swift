//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 29 images.
  struct image {
    /// Image `AgendaStamp`.
    static let agendaStamp = Rswift.ImageResource(bundle: R.hostingBundle, name: "AgendaStamp")
    /// Image `DealSample`.
    static let dealSample = Rswift.ImageResource(bundle: R.hostingBundle, name: "DealSample")
    /// Image `DealUpIndicator`.
    static let dealUpIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "DealUpIndicator")
    /// Image `GildtLogo`.
    static let gildtLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "GildtLogo")
    /// Image `IconError`.
    static let iconError = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconError")
    /// Image `IconProfile`.
    static let iconProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconProfile")
    /// Image `IconSucces`.
    static let iconSucces = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconSucces")
    /// Image `JukeboxHeaderImage`.
    static let jukeboxHeaderImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "JukeboxHeaderImage")
    /// Image `Onboarding_0`.
    static let onboarding_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding_0")
    /// Image `Onboarding_1`.
    static let onboarding_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding_1")
    /// Image `Onboarding_2`.
    static let onboarding_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding_2")
    /// Image `Onboarding_3`.
    static let onboarding_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding_3")
    /// Image `Onboarding_4`.
    static let onboarding_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding_4")
    /// Image `Onboarding_5`.
    static let onboarding_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding_5")
    /// Image `PlusButton`.
    static let plusButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlusButton")
    /// Image `SongRequestCircleImageGreen`.
    static let songRequestCircleImageGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "SongRequestCircleImageGreen")
    /// Image `SongRequestCircleImageWhite`.
    static let songRequestCircleImageWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "SongRequestCircleImageWhite")
    /// Image `SongRequestUpvoteImage`.
    static let songRequestUpvoteImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "SongRequestUpvoteImage")
    /// Image `TabAgenda`.
    static let tabAgenda = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabAgenda")
    /// Image `TabDeals`.
    static let tabDeals = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabDeals")
    /// Image `TabFotos`.
    static let tabFotos = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabFotos")
    /// Image `TabJukebox`.
    static let tabJukebox = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabJukebox")
    /// Image `TabStempelkaart`.
    static let tabStempelkaart = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabStempelkaart")
    /// Image `arrow-down-green`.
    static let arrowDownGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down-green")
    /// Image `arrow-down-grey`.
    static let arrowDownGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down-grey")
    /// Image `arrow-down-red`.
    static let arrowDownRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down-red")
    /// Image `arrow-up-green`.
    static let arrowUpGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-up-green")
    /// Image `arrow-up-grey`.
    static let arrowUpGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-up-grey")
    /// Image `defaultImage`.
    static let defaultImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "defaultImage")
    
    /// `UIImage(named: "AgendaStamp", bundle: ..., traitCollection: ...)`
    static func agendaStamp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.agendaStamp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DealSample", bundle: ..., traitCollection: ...)`
    static func dealSample(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dealSample, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DealUpIndicator", bundle: ..., traitCollection: ...)`
    static func dealUpIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dealUpIndicator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "GildtLogo", bundle: ..., traitCollection: ...)`
    static func gildtLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gildtLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "IconError", bundle: ..., traitCollection: ...)`
    static func iconError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconError, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "IconProfile", bundle: ..., traitCollection: ...)`
    static func iconProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconProfile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "IconSucces", bundle: ..., traitCollection: ...)`
    static func iconSucces(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSucces, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "JukeboxHeaderImage", bundle: ..., traitCollection: ...)`
    static func jukeboxHeaderImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jukeboxHeaderImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Onboarding_0", bundle: ..., traitCollection: ...)`
    static func onboarding_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Onboarding_1", bundle: ..., traitCollection: ...)`
    static func onboarding_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Onboarding_2", bundle: ..., traitCollection: ...)`
    static func onboarding_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Onboarding_3", bundle: ..., traitCollection: ...)`
    static func onboarding_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Onboarding_4", bundle: ..., traitCollection: ...)`
    static func onboarding_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Onboarding_5", bundle: ..., traitCollection: ...)`
    static func onboarding_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PlusButton", bundle: ..., traitCollection: ...)`
    static func plusButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SongRequestCircleImageGreen", bundle: ..., traitCollection: ...)`
    static func songRequestCircleImageGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.songRequestCircleImageGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SongRequestCircleImageWhite", bundle: ..., traitCollection: ...)`
    static func songRequestCircleImageWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.songRequestCircleImageWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SongRequestUpvoteImage", bundle: ..., traitCollection: ...)`
    static func songRequestUpvoteImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.songRequestUpvoteImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabAgenda", bundle: ..., traitCollection: ...)`
    static func tabAgenda(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabAgenda, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabDeals", bundle: ..., traitCollection: ...)`
    static func tabDeals(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabDeals, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabFotos", bundle: ..., traitCollection: ...)`
    static func tabFotos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabFotos, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabJukebox", bundle: ..., traitCollection: ...)`
    static func tabJukebox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabJukebox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabStempelkaart", bundle: ..., traitCollection: ...)`
    static func tabStempelkaart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabStempelkaart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow-down-green", bundle: ..., traitCollection: ...)`
    static func arrowDownGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDownGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow-down-grey", bundle: ..., traitCollection: ...)`
    static func arrowDownGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDownGrey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow-down-red", bundle: ..., traitCollection: ...)`
    static func arrowDownRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDownRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow-up-green", bundle: ..., traitCollection: ...)`
    static func arrowUpGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUpGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow-up-grey", bundle: ..., traitCollection: ...)`
    static func arrowUpGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUpGrey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "defaultImage", bundle: ..., traitCollection: ...)`
    static func defaultImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultImage, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `AgendaTableViewCell`.
    static let agendaTableViewCell = _R.nib._AgendaTableViewCell()
    /// Nib `PreviewImageTableViewCell`.
    static let previewImageTableViewCell = _R.nib._PreviewImageTableViewCell()
    /// Nib `SongRequestTableViewCell`.
    static let songRequestTableViewCell = _R.nib._SongRequestTableViewCell()
    /// Nib `TagCollectionViewCell`.
    static let tagCollectionViewCell = _R.nib._TagCollectionViewCell()
    
    /// `UINib(name: "AgendaTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.agendaTableViewCell) instead")
    static func agendaTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.agendaTableViewCell)
    }
    
    /// `UINib(name: "PreviewImageTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.previewImageTableViewCell) instead")
    static func previewImageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.previewImageTableViewCell)
    }
    
    /// `UINib(name: "SongRequestTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.songRequestTableViewCell) instead")
    static func songRequestTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.songRequestTableViewCell)
    }
    
    /// `UINib(name: "TagCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tagCollectionViewCell) instead")
    static func tagCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagCollectionViewCell)
    }
    
    static func agendaTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AgendaTableViewCell? {
      return R.nib.agendaTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AgendaTableViewCell
    }
    
    static func previewImageTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviewImageTableViewCell? {
      return R.nib.previewImageTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewImageTableViewCell
    }
    
    static func songRequestTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SongRequestTableViewCell? {
      return R.nib.songRequestTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SongRequestTableViewCell
    }
    
    static func tagCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagCollectionViewCell? {
      return R.nib.tagCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagCollectionViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CollectionViewCell`.
    static let collectionViewCell: Rswift.ReuseIdentifier<DealsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CollectionViewCell")
    /// Reuse identifier `StampCollectionViewCell`.
    static let stampCollectionViewCell: Rswift.ReuseIdentifier<StampCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "StampCollectionViewCell")
    /// Reuse identifier `TagCollectionViewCell`.
    static let tagCollectionViewCell: Rswift.ReuseIdentifier<TagCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TagCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `Agenda`.
    static let agenda = _R.storyboard.agenda()
    /// Storyboard `Deals`.
    static let deals = _R.storyboard.deals()
    /// Storyboard `Jukebox`.
    static let jukebox = _R.storyboard.jukebox()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `OnBoarding`.
    static let onBoarding = _R.storyboard.onBoarding()
    /// Storyboard `Photo`.
    static let photo = _R.storyboard.photo()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Stempelkaart`.
    static let stempelkaart = _R.storyboard.stempelkaart()
    
    /// `UIStoryboard(name: "Agenda", bundle: ...)`
    static func agenda(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.agenda)
    }
    
    /// `UIStoryboard(name: "Deals", bundle: ...)`
    static func deals(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.deals)
    }
    
    /// `UIStoryboard(name: "Jukebox", bundle: ...)`
    static func jukebox(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.jukebox)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "OnBoarding", bundle: ...)`
    static func onBoarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onBoarding)
    }
    
    /// `UIStoryboard(name: "Photo", bundle: ...)`
    static func photo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.photo)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Stempelkaart", bundle: ...)`
    static func stempelkaart(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.stempelkaart)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 78 localization keys.
    struct localizable {
      /// Value: 't Gildt heeft toegang nodig tot je foto's wanneer je een foto wilt uploaden.
      static let photos_Permission = Rswift.StringResource(key: "Photos_Permission", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Aanmelden
      static let agenda_Signup = Rswift.StringResource(key: "Agenda_Signup", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Afmelden
      static let agenda_Signoff = Rswift.StringResource(key: "Agenda_Signoff", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Agenda
      static let agenda_Title = Rswift.StringResource(key: "Agenda_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Agenda
      static let onboarding_Agenda = Rswift.StringResource(key: "Onboarding_Agenda", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Algemene voorwaarden
      static let profile_AlgemeneVoorwaarden_title = Rswift.StringResource(key: "Profile_AlgemeneVoorwaarden_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Annuleer
      static let general_Cancel = Rswift.StringResource(key: "General_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bedankt voor je foto!
      static let photos_Upload_Success_Message = Rswift.StringResource(key: "Photos_Upload_Success_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bij de foto’s worden er tags getoont. De tag ‘Halloween’ bevat bijvoorbeeld foto’s van het thema-feest ‘Halloween’. Ook kan je hier zelf foto’s van thema-feesten  uploaden.
      static let onboarding_Photos_Description = Rswift.StringResource(key: "Onboarding_Photos_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bij de jukebox kunnen er muzieknummers worden aangevraagd om af te spelen in ’t Gildt. Ook kan er ge-upvote en ge-downvote worden op eerder aangevraagde nummers.
      static let onboarding_Jukebox_Description = Rswift.StringResource(key: "Onboarding_Jukebox_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Camera
      static let general_Camera = Rswift.StringResource(key: "General_Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: De agenda laat zien wat de aankomende evenementen zijn. Je kunt aangeven of je aanwezig zult zijn en je kan zien wie er ook naar het evenement komt. Zorg dus voor een leuke gebruikersnaam!
      static let onboarding_Agenda_Description = Rswift.StringResource(key: "Onboarding_Agenda_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: De stempelkaart laat zien hoeveel stempels je al hebt gespaard en je kan een stempel claimen als je aanwezig bent op een stempel-evenement. Met een volle stempelkaart zijn prijzen te winnen!
      static let onboarding_Stamps_Description = Rswift.StringResource(key: "Onboarding_Stamps_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Deal ingediend
      static let deals_Deal_Claimed = Rswift.StringResource(key: "Deals_Deal_Claimed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Deals
      static let deals_Title = Rswift.StringResource(key: "Deals_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Deals
      static let onboarding_Deals = Rswift.StringResource(key: "Onboarding_Deals", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Deals laat je jouw coupons zien. Vanuit dit scherm kan de bar-medewerker jouw coupon verzilveren. Sommige deals zijn onbeperkt beschikbaar andere hebben een maximum per gebruiker.
      static let onboarding_Deals_Description = Rswift.StringResource(key: "Onboarding_Deals_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Deze app is gemaakt door: Jeroen Besse, Erik Alserda, Wouter Janson en Camille Schopmeijer tijdens hun minor Mobile Development op Inholland.
      static let profile_OverOntwikkelaars_message = Rswift.StringResource(key: "Profile_OverOntwikkelaars_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Emailadres
      static let login_Email = Rswift.StringResource(key: "Login_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Er ging iets mis tijdens het claimen van je stempel
      static let stamps_Error = Rswift.StringResource(key: "Stamps_Error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Er is iets fout gegaan tijdens het uploaden!
      static let photos_Upload_Fail_Message = Rswift.StringResource(key: "Photos_Upload_Fail_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Er is iets mis gegaan tijdens het doorgeven van je aanwezigheid
      static let agenda_Signup_Error = Rswift.StringResource(key: "Agenda_Signup_Error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Er is iets mis gegaan tijdens het indienen...
      static let deals_Error_Message = Rswift.StringResource(key: "Deals_Error_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Er zijn helaas nog geen algemene voorwaarden voor deze applicatie.
      static let profile_AlgemeneVoorwaarden_message = Rswift.StringResource(key: "Profile_AlgemeneVoorwaarden_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Foto geupload
      static let photos_Upload_Success_Title = Rswift.StringResource(key: "Photos_Upload_Success_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Foto niet geupload
      static let photos_Upload_Fail_Title = Rswift.StringResource(key: "Photos_Upload_Fail_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Foto upload
      static let photos_Upload = Rswift.StringResource(key: "Photos_Upload", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Foto's
      static let onboarding_Photos = Rswift.StringResource(key: "Onboarding_Photos", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Foto's
      static let photos_Title = Rswift.StringResource(key: "Photos_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gebruikersnaam
      static let login_Username = Rswift.StringResource(key: "Login_Username", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Geniet van je drankje!
      static let deals_Enjoy = Rswift.StringResource(key: "Deals_Enjoy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Heb je al een account?
      static let login_Existing_Account = Rswift.StringResource(key: "Login_Existing_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Heb je nog geen account?
      static let login_No_Existing_Account = Rswift.StringResource(key: "Login_No_Existing_Account", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Het is helaas niet gelukt om in te loggen, je hebt waarschijnlijk niet de juiste info ingevuld.
      static let login_Error_Message = Rswift.StringResource(key: "Login_Error_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Het is helaas niet gelukt om je te registreren, omdat: 
      static let login_Register_Error_Reason = Rswift.StringResource(key: "Login_Register_Error_Reason", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Het is helaas niet gelukt om je te registreren, waarschijnlijk omdat je iets verkeerds hebt ingevuld.
      static let login_Register_Error_Message = Rswift.StringResource(key: "Login_Register_Error_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Het lijkt er op dat er geen camera toestemming is gegeven.
      static let stamps_Camera_Permission = Rswift.StringResource(key: "Stamps_Camera_Permission", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Het lijkt er op dat je niet in 't Gildt bent.
      static let stamps_Location_Wrong = Rswift.StringResource(key: "Stamps_Location_Wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hier een kleine uitleg over de app van ’t Gildt  Er zijn 5 basisfuncties beschikbaar voor de gasten van ’t Haerlems Studenten Gildt
      static let onboarding_Welcome_Description = Rswift.StringResource(key: "Onboarding_Welcome_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hoe zou jij deze foto beschrijven?
      static let photos_Description_Question = Rswift.StringResource(key: "Photos_Description_Question", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Instellingen
      static let general_Settings = Rswift.StringResource(key: "General_Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Jukebox
      static let jukebox_Title = Rswift.StringResource(key: "Jukebox_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Jukebox
      static let onboarding_Jukebox = Rswift.StringResource(key: "Onboarding_Jukebox", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Kan niet inloggen :(
      static let login_Error_Title = Rswift.StringResource(key: "Login_Error_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Kan niet registreren :(
      static let login_Register_Error_Title = Rswift.StringResource(key: "Login_Register_Error_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Locatie
      static let stamps_Location = Rswift.StringResource(key: "Stamps_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEW
      static let jukebox_New = Rswift.StringResource(key: "Jukebox_New", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Nog 
      static let deals_Usage_Still = Rswift.StringResource(key: "Deals_Usage_Still", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Nu al 
      static let agenda_Already = Rswift.StringResource(key: "Agenda_Already", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok cool!
      static let profile_OverOntwikkelaars_discard = Rswift.StringResource(key: "Profile_OverOntwikkelaars_discard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok jammer :(
      static let profile_AlgemeneVoorwaarden_discard = Rswift.StringResource(key: "Profile_AlgemeneVoorwaarden_discard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Oke
      static let general_Ok = Rswift.StringResource(key: "General_Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Om een nummer aan te vragen moet je beide velden invullen!
      static let jukebox_Error_Message = Rswift.StringResource(key: "Jukebox_Error_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Omschrijving
      static let photos_Description = Rswift.StringResource(key: "Photos_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Onbeperkt bruikbaar
      static let deals_Usable_Unlimited = Rswift.StringResource(key: "Deals_Usable_Unlimited", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open de app!
      static let onboarding_Open_App = Rswift.StringResource(key: "Onboarding_Open_App", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Over de ontwikkelaars van de applicatie
      static let profile_OverOntwikkelaars_title = Rswift.StringResource(key: "Profile_OverOntwikkelaars_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Probeer het nog eens
      static let login_Error_Discard = Rswift.StringResource(key: "Login_Error_Discard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Probeer het opnieuw
      static let jukebox_Error_Discard = Rswift.StringResource(key: "Jukebox_Error_Discard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profiel
      static let general_Profile = Rswift.StringResource(key: "General_Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: QR Reader niet ondersteunt, neem contact op met de ontwikkelaar.
      static let stamps_Camera_Not_Suported = Rswift.StringResource(key: "Stamps_Camera_Not_Suported", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skip
      static let onboarding_Skip = Rswift.StringResource(key: "Onboarding_Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sluiten
      static let stamps_Close_QR = Rswift.StringResource(key: "Stamps_Close_QR", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stamps
      static let onboarding_Stamps = Rswift.StringResource(key: "Onboarding_Stamps", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stempel geclaimd
      static let stamps_Claimed = Rswift.StringResource(key: "Stamps_Claimed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stempels kunnen niet worden toegekend wanneer locatiegegevens uitstaan voor 't Gildt.  De app dient te controleren of je daadwerkelijk aanwezig bent.
      static let stamps_Location_Error = Rswift.StringResource(key: "Stamps_Location_Error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tag
      static let photos_Tag = Rswift.StringResource(key: "Photos_Tag", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Upload
      static let general_Upload = Rswift.StringResource(key: "General_Upload", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Veel plezier op het feest!
      static let stamps_Enjoy = Rswift.StringResource(key: "Stamps_Enjoy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Velden niet ingevuld
      static let jukebox_Error_Title = Rswift.StringResource(key: "Jukebox_Error_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Volgende
      static let onboarding_Next = Rswift.StringResource(key: "Onboarding_Next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Voortgang:
      static let photos_Upload_Progress = Rswift.StringResource(key: "Photos_Upload_Progress", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Wachtwoord
      static let login_Password = Rswift.StringResource(key: "Login_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Wachtwoord verificatie
      static let login_Password_Verification = Rswift.StringResource(key: "Login_Password_Verification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welkom!
      static let onboarding_Welcome = Rswift.StringResource(key: "Onboarding_Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Whoops!
      static let general_Whoops = Rswift.StringResource(key: "General_Whoops", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: aanmeldingen!
      static let agenda_Attendees = Rswift.StringResource(key: "Agenda_Attendees", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: keer bruikbaar
      static let deals_Times_Usable = Rswift.StringResource(key: "Deals_Times_Usable", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: 't Gildt heeft toegang nodig tot je foto's wanneer je een foto wilt uploaden.
      static func photos_Permission(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Permission", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Aanmelden
      static func agenda_Signup(_: Void = ()) -> String {
        return NSLocalizedString("Agenda_Signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Afmelden
      static func agenda_Signoff(_: Void = ()) -> String {
        return NSLocalizedString("Agenda_Signoff", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Agenda
      static func agenda_Title(_: Void = ()) -> String {
        return NSLocalizedString("Agenda_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Agenda
      static func onboarding_Agenda(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Agenda", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Algemene voorwaarden
      static func profile_AlgemeneVoorwaarden_title(_: Void = ()) -> String {
        return NSLocalizedString("Profile_AlgemeneVoorwaarden_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Annuleer
      static func general_Cancel(_: Void = ()) -> String {
        return NSLocalizedString("General_Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Bedankt voor je foto!
      static func photos_Upload_Success_Message(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Upload_Success_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Bij de foto’s worden er tags getoont. De tag ‘Halloween’ bevat bijvoorbeeld foto’s van het thema-feest ‘Halloween’. Ook kan je hier zelf foto’s van thema-feesten  uploaden.
      static func onboarding_Photos_Description(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Photos_Description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Bij de jukebox kunnen er muzieknummers worden aangevraagd om af te spelen in ’t Gildt. Ook kan er ge-upvote en ge-downvote worden op eerder aangevraagde nummers.
      static func onboarding_Jukebox_Description(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Jukebox_Description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Camera
      static func general_Camera(_: Void = ()) -> String {
        return NSLocalizedString("General_Camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: De agenda laat zien wat de aankomende evenementen zijn. Je kunt aangeven of je aanwezig zult zijn en je kan zien wie er ook naar het evenement komt. Zorg dus voor een leuke gebruikersnaam!
      static func onboarding_Agenda_Description(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Agenda_Description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: De stempelkaart laat zien hoeveel stempels je al hebt gespaard en je kan een stempel claimen als je aanwezig bent op een stempel-evenement. Met een volle stempelkaart zijn prijzen te winnen!
      static func onboarding_Stamps_Description(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Stamps_Description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Deal ingediend
      static func deals_Deal_Claimed(_: Void = ()) -> String {
        return NSLocalizedString("Deals_Deal_Claimed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Deals
      static func deals_Title(_: Void = ()) -> String {
        return NSLocalizedString("Deals_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Deals
      static func onboarding_Deals(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Deals", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Deals laat je jouw coupons zien. Vanuit dit scherm kan de bar-medewerker jouw coupon verzilveren. Sommige deals zijn onbeperkt beschikbaar andere hebben een maximum per gebruiker.
      static func onboarding_Deals_Description(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Deals_Description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Deze app is gemaakt door: Jeroen Besse, Erik Alserda, Wouter Janson en Camille Schopmeijer tijdens hun minor Mobile Development op Inholland.
      static func profile_OverOntwikkelaars_message(_: Void = ()) -> String {
        return NSLocalizedString("Profile_OverOntwikkelaars_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Emailadres
      static func login_Email(_: Void = ()) -> String {
        return NSLocalizedString("Login_Email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Er ging iets mis tijdens het claimen van je stempel
      static func stamps_Error(_: Void = ()) -> String {
        return NSLocalizedString("Stamps_Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Er is iets fout gegaan tijdens het uploaden!
      static func photos_Upload_Fail_Message(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Upload_Fail_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Er is iets mis gegaan tijdens het doorgeven van je aanwezigheid
      static func agenda_Signup_Error(_: Void = ()) -> String {
        return NSLocalizedString("Agenda_Signup_Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Er is iets mis gegaan tijdens het indienen...
      static func deals_Error_Message(_: Void = ()) -> String {
        return NSLocalizedString("Deals_Error_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Er zijn helaas nog geen algemene voorwaarden voor deze applicatie.
      static func profile_AlgemeneVoorwaarden_message(_: Void = ()) -> String {
        return NSLocalizedString("Profile_AlgemeneVoorwaarden_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Foto geupload
      static func photos_Upload_Success_Title(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Upload_Success_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Foto niet geupload
      static func photos_Upload_Fail_Title(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Upload_Fail_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Foto upload
      static func photos_Upload(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Upload", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Foto's
      static func onboarding_Photos(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Photos", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Foto's
      static func photos_Title(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Gebruikersnaam
      static func login_Username(_: Void = ()) -> String {
        return NSLocalizedString("Login_Username", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Geniet van je drankje!
      static func deals_Enjoy(_: Void = ()) -> String {
        return NSLocalizedString("Deals_Enjoy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Heb je al een account?
      static func login_Existing_Account(_: Void = ()) -> String {
        return NSLocalizedString("Login_Existing_Account", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Heb je nog geen account?
      static func login_No_Existing_Account(_: Void = ()) -> String {
        return NSLocalizedString("Login_No_Existing_Account", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Het is helaas niet gelukt om in te loggen, je hebt waarschijnlijk niet de juiste info ingevuld.
      static func login_Error_Message(_: Void = ()) -> String {
        return NSLocalizedString("Login_Error_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Het is helaas niet gelukt om je te registreren, omdat: 
      static func login_Register_Error_Reason(_: Void = ()) -> String {
        return NSLocalizedString("Login_Register_Error_Reason", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Het is helaas niet gelukt om je te registreren, waarschijnlijk omdat je iets verkeerds hebt ingevuld.
      static func login_Register_Error_Message(_: Void = ()) -> String {
        return NSLocalizedString("Login_Register_Error_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Het lijkt er op dat er geen camera toestemming is gegeven.
      static func stamps_Camera_Permission(_: Void = ()) -> String {
        return NSLocalizedString("Stamps_Camera_Permission", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Het lijkt er op dat je niet in 't Gildt bent.
      static func stamps_Location_Wrong(_: Void = ()) -> String {
        return NSLocalizedString("Stamps_Location_Wrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hier een kleine uitleg over de app van ’t Gildt  Er zijn 5 basisfuncties beschikbaar voor de gasten van ’t Haerlems Studenten Gildt
      static func onboarding_Welcome_Description(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Welcome_Description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hoe zou jij deze foto beschrijven?
      static func photos_Description_Question(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Description_Question", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Instellingen
      static func general_Settings(_: Void = ()) -> String {
        return NSLocalizedString("General_Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Jukebox
      static func jukebox_Title(_: Void = ()) -> String {
        return NSLocalizedString("Jukebox_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Jukebox
      static func onboarding_Jukebox(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Jukebox", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Kan niet inloggen :(
      static func login_Error_Title(_: Void = ()) -> String {
        return NSLocalizedString("Login_Error_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Kan niet registreren :(
      static func login_Register_Error_Title(_: Void = ()) -> String {
        return NSLocalizedString("Login_Register_Error_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Locatie
      static func stamps_Location(_: Void = ()) -> String {
        return NSLocalizedString("Stamps_Location", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEW
      static func jukebox_New(_: Void = ()) -> String {
        return NSLocalizedString("Jukebox_New", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Nog 
      static func deals_Usage_Still(_: Void = ()) -> String {
        return NSLocalizedString("Deals_Usage_Still", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Nu al 
      static func agenda_Already(_: Void = ()) -> String {
        return NSLocalizedString("Agenda_Already", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ok cool!
      static func profile_OverOntwikkelaars_discard(_: Void = ()) -> String {
        return NSLocalizedString("Profile_OverOntwikkelaars_discard", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ok jammer :(
      static func profile_AlgemeneVoorwaarden_discard(_: Void = ()) -> String {
        return NSLocalizedString("Profile_AlgemeneVoorwaarden_discard", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Oke
      static func general_Ok(_: Void = ()) -> String {
        return NSLocalizedString("General_Ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Om een nummer aan te vragen moet je beide velden invullen!
      static func jukebox_Error_Message(_: Void = ()) -> String {
        return NSLocalizedString("Jukebox_Error_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Omschrijving
      static func photos_Description(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Onbeperkt bruikbaar
      static func deals_Usable_Unlimited(_: Void = ()) -> String {
        return NSLocalizedString("Deals_Usable_Unlimited", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Open de app!
      static func onboarding_Open_App(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Open_App", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Over de ontwikkelaars van de applicatie
      static func profile_OverOntwikkelaars_title(_: Void = ()) -> String {
        return NSLocalizedString("Profile_OverOntwikkelaars_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Probeer het nog eens
      static func login_Error_Discard(_: Void = ()) -> String {
        return NSLocalizedString("Login_Error_Discard", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Probeer het opnieuw
      static func jukebox_Error_Discard(_: Void = ()) -> String {
        return NSLocalizedString("Jukebox_Error_Discard", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Profiel
      static func general_Profile(_: Void = ()) -> String {
        return NSLocalizedString("General_Profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: QR Reader niet ondersteunt, neem contact op met de ontwikkelaar.
      static func stamps_Camera_Not_Suported(_: Void = ()) -> String {
        return NSLocalizedString("Stamps_Camera_Not_Suported", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Skip
      static func onboarding_Skip(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Skip", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sluiten
      static func stamps_Close_QR(_: Void = ()) -> String {
        return NSLocalizedString("Stamps_Close_QR", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Stamps
      static func onboarding_Stamps(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Stamps", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Stempel geclaimd
      static func stamps_Claimed(_: Void = ()) -> String {
        return NSLocalizedString("Stamps_Claimed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Stempels kunnen niet worden toegekend wanneer locatiegegevens uitstaan voor 't Gildt.  De app dient te controleren of je daadwerkelijk aanwezig bent.
      static func stamps_Location_Error(_: Void = ()) -> String {
        return NSLocalizedString("Stamps_Location_Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Tag
      static func photos_Tag(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Upload
      static func general_Upload(_: Void = ()) -> String {
        return NSLocalizedString("General_Upload", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Veel plezier op het feest!
      static func stamps_Enjoy(_: Void = ()) -> String {
        return NSLocalizedString("Stamps_Enjoy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Velden niet ingevuld
      static func jukebox_Error_Title(_: Void = ()) -> String {
        return NSLocalizedString("Jukebox_Error_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Volgende
      static func onboarding_Next(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Next", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Voortgang:
      static func photos_Upload_Progress(_: Void = ()) -> String {
        return NSLocalizedString("Photos_Upload_Progress", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Wachtwoord
      static func login_Password(_: Void = ()) -> String {
        return NSLocalizedString("Login_Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Wachtwoord verificatie
      static func login_Password_Verification(_: Void = ()) -> String {
        return NSLocalizedString("Login_Password_Verification", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Welkom!
      static func onboarding_Welcome(_: Void = ()) -> String {
        return NSLocalizedString("Onboarding_Welcome", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Whoops!
      static func general_Whoops(_: Void = ()) -> String {
        return NSLocalizedString("General_Whoops", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: aanmeldingen!
      static func agenda_Attendees(_: Void = ()) -> String {
        return NSLocalizedString("Agenda_Attendees", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: keer bruikbaar
      static func deals_Times_Usable(_: Void = ()) -> String {
        return NSLocalizedString("Deals_Times_Usable", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 5 localization keys.
    struct main {
      /// nl translation: Item
      /// 
      /// Locales: nl
      static let gnzOZUunTitle = Rswift.StringResource(key: "Gnz-oZ-uun.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nl"], comment: nil)
      /// nl translation: Item
      /// 
      /// Locales: nl
      static let onsui0GjTitle = Rswift.StringResource(key: "ONS-UI-0Gj.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nl"], comment: nil)
      /// nl translation: Item
      /// 
      /// Locales: nl
      static let s5DVZKafTitle = Rswift.StringResource(key: "S5D-VZ-Kaf.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nl"], comment: nil)
      /// nl translation: Item
      /// 
      /// Locales: nl
      static let tluJNBtoTitle = Rswift.StringResource(key: "tlu-JN-bto.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nl"], comment: nil)
      /// nl translation: Item
      /// 
      /// Locales: nl
      static let vYwR5K4MTitle = Rswift.StringResource(key: "VYw-r5-k4M.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nl"], comment: nil)
      
      /// nl translation: Item
      /// 
      /// Locales: nl
      static func gnzOZUunTitle(_: Void = ()) -> String {
        return NSLocalizedString("Gnz-oZ-uun.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nl translation: Item
      /// 
      /// Locales: nl
      static func onsui0GjTitle(_: Void = ()) -> String {
        return NSLocalizedString("ONS-UI-0Gj.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nl translation: Item
      /// 
      /// Locales: nl
      static func s5DVZKafTitle(_: Void = ()) -> String {
        return NSLocalizedString("S5D-VZ-Kaf.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nl translation: Item
      /// 
      /// Locales: nl
      static func tluJNBtoTitle(_: Void = ()) -> String {
        return NSLocalizedString("tlu-JN-bto.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nl translation: Item
      /// 
      /// Locales: nl
      static func vYwR5K4MTitle(_: Void = ()) -> String {
        return NSLocalizedString("VYw-r5-k4M.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AgendaTableViewCell.validate()
      try _SongRequestTableViewCell.validate()
    }
    
    struct _AgendaTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AgendaTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AgendaTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AgendaTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "AgendaStamp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AgendaStamp' is used in nib 'AgendaTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PreviewImageTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PreviewImageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviewImageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewImageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SongRequestTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SongRequestTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SongRequestTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SongRequestTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "SongRequestCircleImageWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SongRequestCircleImageWhite' is used in nib 'SongRequestTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-down-grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-down-grey' is used in nib 'SongRequestTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-up-grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-up-grey' is used in nib 'SongRequestTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TagCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TagCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TagCollectionViewCell"
      let name = "TagCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try agenda.validate()
      try deals.validate()
      try jukebox.validate()
      try launchScreen.validate()
      try login.validate()
      try main.validate()
      try onBoarding.validate()
      try photo.validate()
      try profile.validate()
      try stempelkaart.validate()
    }
    
    struct agenda: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationViewController
      
      let agendaViewController = StoryboardViewControllerResource<AgendaViewController>(identifier: "AgendaViewController")
      let bundle = R.hostingBundle
      let eventViewController = StoryboardViewControllerResource<EventViewController>(identifier: "EventViewController")
      let name = "Agenda"
      
      func agendaViewController(_: Void = ()) -> AgendaViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: agendaViewController)
      }
      
      func eventViewController(_: Void = ()) -> EventViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "AgendaStamp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AgendaStamp' is used in storyboard 'Agenda', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabAgenda", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabAgenda' is used in storyboard 'Agenda', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.agenda().agendaViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'agendaViewController' could not be loaded from storyboard 'Agenda' as 'AgendaViewController'.") }
        if _R.storyboard.agenda().eventViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventViewController' could not be loaded from storyboard 'Agenda' as 'EventViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct deals: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let name = "Deals"
      let storyboardExampleViewController = StoryboardViewControllerResource<DealsViewController>(identifier: "StoryboardExampleViewController")
      
      func storyboardExampleViewController(_: Void = ()) -> DealsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storyboardExampleViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "DealSample", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DealSample' is used in storyboard 'Deals', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DealUpIndicator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DealUpIndicator' is used in storyboard 'Deals', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabDeals", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabDeals' is used in storyboard 'Deals', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.deals().storyboardExampleViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storyboardExampleViewController' could not be loaded from storyboard 'Deals' as 'DealsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct jukebox: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let jukeboxViewController = StoryboardViewControllerResource<JukeboxViewController>(identifier: "JukeboxViewController")
      let name = "Jukebox"
      
      func jukeboxViewController(_: Void = ()) -> JukeboxViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jukeboxViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "JukeboxHeaderImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'JukeboxHeaderImage' is used in storyboard 'Jukebox', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PlusButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PlusButton' is used in storyboard 'Jukebox', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabJukebox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabJukebox' is used in storyboard 'Jukebox', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.jukebox().jukeboxViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jukeboxViewController' could not be loaded from storyboard 'Jukebox' as 'JukeboxViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "GildtLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GildtLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainTabBarController
      
      let bundle = R.hostingBundle
      let mainTabBarController = StoryboardViewControllerResource<MainTabBarController>(identifier: "MainTabBarController")
      let name = "Main"
      
      func mainTabBarController(_: Void = ()) -> MainTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'MainTabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct onBoarding: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnBoarding"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct photo: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let name = "Photo"
      let tagOverviewViewController = StoryboardViewControllerResource<TagOverviewViewController>(identifier: "TagOverviewViewController")
      let tagPhotosViewController = StoryboardViewControllerResource<TagPhotosViewController>(identifier: "TagPhotosViewController")
      
      func tagOverviewViewController(_: Void = ()) -> TagOverviewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tagOverviewViewController)
      }
      
      func tagPhotosViewController(_: Void = ()) -> TagPhotosViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tagPhotosViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "TabFotos", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabFotos' is used in storyboard 'Photo', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.photo().tagOverviewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tagOverviewViewController' could not be loaded from storyboard 'Photo' as 'TagOverviewViewController'.") }
        if _R.storyboard.photo().tagPhotosViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tagPhotosViewController' could not be loaded from storyboard 'Photo' as 'TagPhotosViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct stempelkaart: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let name = "Stempelkaart"
      let stempelkaartViewController = StoryboardViewControllerResource<StempelkaartViewController>(identifier: "StempelkaartViewController")
      
      func stempelkaartViewController(_: Void = ()) -> StempelkaartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stempelkaartViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "TabStempelkaart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabStempelkaart' is used in storyboard 'Stempelkaart', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.stempelkaart().stempelkaartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stempelkaartViewController' could not be loaded from storyboard 'Stempelkaart' as 'StempelkaartViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
